name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_TYPE:          Release
  MAKEFLAGS:           "-j2"
  BOOST_VERSION_MAJOR: 1
  BOOST_VERSION_MINOR: 76
  BOOST_VERSION_PATCH: 0

defaults:
  run:
    shell: bash

jobs:
  build-ubuntu:
    name:    Ubuntu (Build, Test, and Coverage)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install boost
        run:  sudo apt install libboost-all-dev
      - name: Configure CMake
        run:  cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SYREC_TESTS=ON -DBINDINGS=ON
      - name: Build
        run:  cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE
      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        run:               ctest -C $BUILD_TYPE --output-on-failure
      - name: Coverage
        run:  |
              cmake -S "${{github.workspace}}" -B "${{github.workspace}}/buildCov" -DCMAKE_BUILD_TYPE=Debug -DBUILD_SYREC_TESTS=ON -DCOVERAGE=ON
              cmake --build "${{github.workspace}}/buildCov" --config Debug
              cd buildCov/test
              ctest -C Debug --output-on-failure
      - name: Run gcov
        run:  find . -type f -name '*.gcno' -exec gcov -p  {} +
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          fail_ci_if_error: true
          token:            ${{ secrets.CODECOV_TOKEN }}

  build-macos:
    name:    macOS (Build and Test)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install boost
        run:  brew install boost
      - name: Configure CMake
        run:  cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SYREC_TESTS=ON -DBINDINGS=ON
      - name: Build
        run:  cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE
      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        run:               ctest -C $BUILD_TYPE --output-on-failure

  build-windows:
    name:    Windows (Build and Test)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Cache Boost
        id:   cache-boost
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}
          key:  ${{ runner.OS }}-boost-${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}
      - name:  Download boost
        if:    steps.cache-boost.outputs.cache-hit != 'true'
        shell: cmd
        run:   |
               C:\msys64\usr\bin\wget.exe https://boostorg.jfrog.io/artifactory/main/release/${{ env.BOOST_VERSION_MAJOR }}.${{ env.BOOST_VERSION_MINOR }}.${{ env.BOOST_VERSION_PATCH }}/source/boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}.7z --no-check-certificate
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Building boost
        if:   steps.cache-boost.outputs.cache-hit != 'true'
        run:  |
              "/c/Program Files/7-Zip/7z.exe" x boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}.7z "-o${{github.workspace}}"
              cd boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}
              ./bootstrap.bat
              ./b2.exe -j8 address-model=64 link=static threading=multi runtime-link=shared variant=release --build-type=minimal
      - name: Configure CMake
        run:  cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SYREC_TESTS=ON -T "ClangCl" -DBoost_USE_STATIC_LIBS=ON -DBoost_USE_MULTITHREADED=ON -DBoost_USE_STATIC_RUNTIME=OFF -DBOOST_ROOT="${{github.workspace}}\boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}" -DBOOST_INCLUDEDIR="${{github.workspace}}\boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}\include" -DBOOST_LIBRARYDIR="${{github.workspace}}\boost_${{ env.BOOST_VERSION_MAJOR }}_${{ env.BOOST_VERSION_MINOR }}_${{ env.BOOST_VERSION_PATCH }}\lib"
      - name: Build
        run:  cmake --build "${{github.workspace}}/build" --config $BUILD_TYPE
      - name:              Test
        working-directory: ${{github.workspace}}/build/test
        run:               cd $BUILD_TYPE && ./syrec_test

  codestyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source: 'include src test mqt/syrec'
          extensions:         'h,hpp,c,cpp'
          clangFormatVersion: 12
